// <auto-generated />
using System;
using Lineupper.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lineupper.Infrastructure.Migrations
{
    [DbContext(typeof(LineupperDbContext))]
    [Migration("20250607151417_AddFestivalTime")]
    partial class AddFestivalTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("Lineupper.Domain.Models.Band", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FestivalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SetDuration")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Festival", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ConcertEndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ConcertStartTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Festivals");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.ScheduleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BandId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FestivalId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("FestivalId");

                    b.ToTable("ScheduleItems");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Role").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BandId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BandId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Organizer", b =>
                {
                    b.HasBaseType("Lineupper.Domain.Models.User");

                    b.HasDiscriminator().HasValue("Organizer");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Participant", b =>
                {
                    b.HasBaseType("Lineupper.Domain.Models.User");

                    b.HasDiscriminator().HasValue("Participant");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Band", b =>
                {
                    b.HasOne("Lineupper.Domain.Models.Festival", "Festival")
                        .WithMany("Bands")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Festival");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Festival", b =>
                {
                    b.HasOne("Lineupper.Domain.Models.Organizer", "Organizer")
                        .WithMany("Festivals")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.ScheduleItem", b =>
                {
                    b.HasOne("Lineupper.Domain.Models.Band", "Band")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lineupper.Domain.Models.Festival", "Festival")
                        .WithMany("Schedule")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("Festival");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Vote", b =>
                {
                    b.HasOne("Lineupper.Domain.Models.Band", "Band")
                        .WithMany("Votes")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lineupper.Domain.Models.Participant", "Participant")
                        .WithMany("Votes")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Band", b =>
                {
                    b.Navigation("ScheduleItems");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Festival", b =>
                {
                    b.Navigation("Bands");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Organizer", b =>
                {
                    b.Navigation("Festivals");
                });

            modelBuilder.Entity("Lineupper.Domain.Models.Participant", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
