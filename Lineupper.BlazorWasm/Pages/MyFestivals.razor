@page "/myfestivals"
@using Lineupper.Domain.Models
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Moje festiwale</PageTitle>

<style>
    body {
        background: linear-gradient(to bottom right, #f8f9fa, #e9ecef);
        min-height: 100vh;
    }
</style>

<div class="d-flex flex-column justify-content-center align-items-center px-3 py-4">
    <div class="container">
        <div class="card shadow rounded mb-4">
            <div class="card-body d-flex justify-content-between align-items-center">
                <h3 class="text-primary m-0">Moje festiwale</h3>
                <button class="btn btn-success" @onclick="NavigateToCreate">+ Dodaj nowy festiwal</button>
            </div>
        </div>

        @if (festivals == null)
        {
            <div class="alert alert-info text-center">Ładowanie festiwali...</div>
        }
        else if (!festivals.Any())
        {
            <div class="alert alert-secondary text-center">Nie masz jeszcze żadnych festiwali.</div>
        }
        else
        {
            <div class="card shadow-sm rounded">
                <div class="card-body p-4">
                    <table class="table table-striped align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Nazwa</th>
                                <th>Data</th>
                                <th>Lokalizacja</th>
                                <th>Status</th>
                                <th>Akcje</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var fest in festivals)
                            {
                                <tr>
                                    <td>@fest.Name</td>
                                    <td>@fest.StartDate.ToShortDateString()</td>
                                    <td>@fest.Location</td>
                                    <td>@fest.Status</td>
                                    <td>
                                        <a class="btn btn-sm btn-outline-primary me-2" href="/festivaldetails/@fest.Id">Szczegóły</a>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteFestival(fest.Id)">Usuń</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Festival>? festivals;
    private Guid organizerId;

    protected override async Task OnInitializedAsync()
    {
        var user = await LocalStorage.GetItemAsync<AuthUserDto>("user");

        if (user is null || user.UserType != SharedKernel.Enums.UserType.Organizer)
        {
            festivals = new();
            return;
        }

        organizerId = user.Id;
        await LoadFestivals();
    }

    private async Task LoadFestivals()
    {
        festivals = await Http.GetFromJsonAsync<List<Festival>>($"api/Festival/GetFestivalsByOrganizer?organizerID={organizerId}");
    }

    private async Task DeleteFestival(Guid id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Na pewno chcesz usunąć ten festiwal?");
        if (!confirmed) return;

        var response = await Http.DeleteAsync($"api/Festival/Delete?festivalId={id}");
        if (response.IsSuccessStatusCode)
        {
            festivals = festivals!.Where(f => f.Id != id).ToList();
        }
        else
        {
            Console.WriteLine("Błąd przy usuwaniu festiwalu.");
        }
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/createfestival");
    }

    public class AuthUserDto
    {
        public Guid Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public string PasswordHash { get; set; }
        public SharedKernel.Enums.UserType UserType { get; set; }
    }
}
