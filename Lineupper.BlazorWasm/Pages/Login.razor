@page "/login"
@using System.ComponentModel.DataAnnotations
@using Lineupper.Application.Dto
@using Lineupper.Domain.Models
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<PageTitle>Logowanie</PageTitle>

<style>
    body {
        background: linear-gradient(to bottom right, #f8f9fa, #e9ecef);
        min-height: 100vh;
    }
</style>

<div class="d-flex flex-column justify-content-center align-items-center text-center px-3" style="min-height: 100vh;">
    <div class="container bg-white shadow rounded p-5" style="max-width: 600px;">
        <h2 class="mb-4 text-primary fw-bold">Zaloguj się do Lineupper</h2>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 text-start">
                <label class="form-label">Email:</label>
                <input type="email" class="form-control" @bind="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="mb-4 text-start">
                <label class="form-label">Hasło:</label>
                <input type="password" class="form-control" @bind="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary btn-lg w-100">Zaloguj się</button>
        </EditForm>

        @if (loginSuccess.HasValue)
        {
            if (loginSuccess.Value)
            {
                <div class="alert alert-success mt-4">Zalogowano pomyślnie!</div>
            }
            else
            {
                <div class="alert alert-danger mt-4">Nieprawidłowe dane logowania.</div>
            }
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new()
        {
            Email = "",
            Password = ""
        };

    private bool? loginSuccess = null;

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("api/User/Login", new LoginDto { Email = loginModel.Email, Password = loginModel.Password });

        if (response.IsSuccessStatusCode)
        {
            var auth = await response.Content.ReadFromJsonAsync<AuthUserDto>();

            if (auth is not null)
            {
                await LocalStorage.SetItemAsync("user", auth);
                loginSuccess = true;

                // ⬇️ Przekierowanie z wymuszonym odświeżeniem
                if (auth.UserType == SharedKernel.Enums.UserType.Organizer)
                {
                    Navigation.NavigateTo("/dashboard-organizer", forceLoad: true);
                }
                else
                {
                    Navigation.NavigateTo("/dashboard-participant", forceLoad: true);
                }
            }
        }
        else
        {
            loginSuccess = false;
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Błąd logowania: " + error);
        }
    }


    public class LoginModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Nieprawidłowy email")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Hasło jest wymagane")]
        public string Password { get; set; }
    }

    public class AuthUserDto
    {
        public Guid Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public string PasswordHash { get; set; }
        public SharedKernel.Enums.UserType UserType { get; set; }
    }
}
